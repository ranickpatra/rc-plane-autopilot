#pragma once

#include <stdint.h>
#include <stdlib.h>
#include <Wire.h>
#include "flight/imu.h"


/****************************************************************************************************************************************/

/*integer type cast for variable*/
// #define  uint_cast(x)    static_cast<uint8_t>(x)

/****************************MPU6050 Address definitions*******************************/

constexpr uint8_t MPU6050_ADDRESS_AD0_LOW = 0x68;  // address pin low (GND), default for InvenSense evaluation board
constexpr uint8_t MPU6050_ADDRESS_AD0_HIGH = 0x69; // address pin high (VCC)
constexpr uint8_t MPU6050_DEFAULT_ADDRESS = MPU6050_ADDRESS_AD0_LOW;

/******************************MPU6050 Registers******************************/

enum MPU6050_REG
{
  MPU6050_RA_XG_OFFS_TC = 0x00,
  MPU6050_RA_YG_OFFS_TC,
  MPU6050_RA_ZG_OFFS_TC,
  MPU6050_RA_X_FINE_GAIN,
  MPU6050_RA_Y_FINE_GAIN,
  MPU6050_RA_Z_FINE_GAIN,
  MPU6050_RA_XA_OFFS_H,
  MPU6050_RA_XA_OFFS_L_TC,
  MPU6050_RA_YA_OFFS_H,
  MPU6050_RA_YA_OFFS_L_TC,
  MPU6050_RA_ZA_OFFS_H = 0x0A,
  MPU6050_RA_ZA_OFFS_L_TC,
  MPU6050_RA_SELF_TEST_X = 0x0D,
  MPU6050_RA_SELF_TEST_Y,
  MPU6050_RA_SELF_TEST_Z,
  MPU6050_RA_SELF_TEST_A = 0x10,
  MPU6050_RA_XG_OFFS_USRH = 0x13,
  MPU6050_RA_XG_OFFS_USRL,
  MPU6050_RA_YG_OFFS_USRH,
  MPU6050_RA_YG_OFFS_USRL,
  MPU6050_RA_ZG_OFFS_USRH,
  MPU6050_RA_ZG_OFFS_USRL,
  MPU6050_RA_SMPLRT_DIV,
  MPU6050_RA_CONFIG = 0x1A,
  MPU6050_RA_GYRO_CONFIG,
  MPU6050_RA_ACCEL_CONFIG,
  MPU6050_RA_FF_THR,
  MPU6050_RA_FF_DUR,
  MPU6050_RA_MOT_THR,
  MPU6050_RA_MOT_DUR = 0x20,
  MPU6050_RA_ZRMOT_THR,
  MPU6050_RA_ZRMOT_DUR,
  MPU6050_RA_FIFO_EN,
  MPU6050_RA_I2C_MST_CTRL,
  MPU6050_RA_I2C_SLV0_ADDR,
  MPU6050_RA_I2C_SLV0_REG,
  MPU6050_RA_I2C_SLV0_CTRL,
  MPU6050_RA_I2C_SLV1_ADDR,
  MPU6050_RA_I2C_SLV1_REG,
  MPU6050_RA_I2C_SLV1_CTRL = 0x2A,
  MPU6050_RA_I2C_SLV2_ADDR,
  MPU6050_RA_I2C_SLV2_REG,
  MPU6050_RA_I2C_SLV2_CTRL,
  MPU6050_RA_I2C_SLV3_ADDR,
  MPU6050_RA_I2C_SLV3_REG,
  MPU6050_RA_I2C_SLV3_CTRL = 0x30,
  MPU6050_RA_I2C_SLV4_ADDR,
  MPU6050_RA_I2C_SLV4_REG,
  MPU6050_RA_I2C_SLV4_DO,
  MPU6050_RA_I2C_SLV4_CTRL,
  MPU6050_RA_I2C_SLV4_DI,
  MPU6050_RA_I2C_MST_STATUS,
  MPU6050_RA_INT_PIN_CFG,
  MPU6050_RA_INT_ENABLE,
  MPU6050_RA_DMP_INT_STATUS,
  MPU6050_RA_INT_STATUS = 0x3A,
  MPU6050_RA_ACCEL_XOUT_H,
  MPU6050_RA_ACCEL_XOUT_L,
  MPU6050_RA_ACCEL_YOUT_H,
  MPU6050_RA_ACCEL_YOUT_L,
  MPU6050_RA_ACCEL_ZOUT_H,
  MPU6050_RA_ACCEL_ZOUT_L = 0x40,
  MPU6050_RA_TEMP_OUT_H,
  MPU6050_RA_TEMP_OUT_L,
  MPU6050_RA_GYRO_XOUT_H,
  MPU6050_RA_GYRO_XOUT_L,
  MPU6050_RA_GYRO_YOUT_H,
  MPU6050_RA_GYRO_YOUT_L,
  MPU6050_RA_GYRO_ZOUT_H,
  MPU6050_RA_GYRO_ZOUT_L,
  MPU6050_RA_EXT_SENS_DATA_00,
  MPU6050_RA_EXT_SENS_DATA_01 = 0x4A,
  MPU6050_RA_EXT_SENS_DATA_02,
  MPU6050_RA_EXT_SENS_DATA_03,
  MPU6050_RA_EXT_SENS_DATA_04,
  MPU6050_RA_EXT_SENS_DATA_05,
  MPU6050_RA_EXT_SENS_DATA_06,
  MPU6050_RA_EXT_SENS_DATA_07 = 0x50,
  MPU6050_RA_EXT_SENS_DATA_08,
  MPU6050_RA_EXT_SENS_DATA_09,
  MPU6050_RA_EXT_SENS_DATA_10,
  MPU6050_RA_EXT_SENS_DATA_11,
  MPU6050_RA_EXT_SENS_DATA_12,
  MPU6050_RA_EXT_SENS_DATA_13,
  MPU6050_RA_EXT_SENS_DATA_14,
  MPU6050_RA_EXT_SENS_DATA_15,
  MPU6050_RA_EXT_SENS_DATA_16,
  MPU6050_RA_EXT_SENS_DATA_17 = 0x5A,
  MPU6050_RA_EXT_SENS_DATA_18,
  MPU6050_RA_EXT_SENS_DATA_19,
  MPU6050_RA_EXT_SENS_DATA_20,
  MPU6050_RA_EXT_SENS_DATA_21,
  MPU6050_RA_EXT_SENS_DATA_22,
  MPU6050_RA_EXT_SENS_DATA_23 = 0x60,
  MPU6050_RA_MOT_DETECT_STATUS,
  MPU6050_RA_I2C_SLV0_DO = 0x63,
  MPU6050_RA_I2C_SLV1_DO,
  MPU6050_RA_I2C_SLV2_DO,
  MPU6050_RA_I2C_SLV3_DO,
  MPU6050_RA_I2C_MST_DELAY_CTRL,
  MPU6050_RA_SIGNAL_PATH_RESET,
  MPU6050_RA_MOT_DETECT_CTRL,
  MPU6050_RA_USER_CTRL = 0x6A,
  MPU6050_RA_PWR_MGMT_1,
  MPU6050_RA_PWR_MGMT_2,
  MPU6050_RA_BANK_SEL,
  MPU6050_RA_MEM_START_ADDR,
  MPU6050_RA_MEM_R_W,
  MPU6050_RA_DMP_CFG_1 = 0x70,
  MPU6050_RA_DMP_CFG_2,
  MPU6050_RA_FIFO_COUNTH,
  MPU6050_RA_FIFO_COUNTL,
  MPU6050_RA_FIFO_R_W,
  MPU6050_RA_WHO_AM_I

};

/**********************SELF TEST definitions************************/

constexpr uint8_t MPU6050_SELF_TEST_XA_1_LENGTH = 0x03;
constexpr uint8_t MPU6050_SELF_TEST_XA_2_LENGTH = 0x02;

constexpr uint8_t MPU6050_SELF_TEST_YA_1_LENGTH = 0x03;
constexpr uint8_t MPU6050_SELF_TEST_YA_2_LENGTH = 0x02;

constexpr uint8_t MPU6050_SELF_TEST_ZA_1_LENGTH = 0x03;
constexpr uint8_t MPU6050_SELF_TEST_ZA_2_LENGTH = 0x02;

constexpr uint8_t MPU6050_SELF_TEST_XG_1_LENGTH = 0x05;
constexpr uint8_t MPU6050_SELF_TEST_YG_1_LENGTH = 0x05;
constexpr uint8_t MPU6050_SELF_TEST_ZG_1_LENGTH = 0x05;

enum SELF_TEST_REG_BIT
{
  MPU6050_SELF_TEST_XA_1_BIT = 0x07,
  MPU6050_SELF_TEST_XA_2_BIT = 0x05,
  MPU6050_SELF_TEST_YA_1_BIT = 0x07,
  MPU6050_SELF_TEST_YA_2_BIT = 0x03,
  MPU6050_SELF_TEST_ZA_1_BIT = 0x07,
  MPU6050_SELF_TEST_ZA_2_BIT = 0x01,
  MPU6050_SELF_TEST_XG_1_BIT = 0x04,
  MPU6050_SELF_TEST_YG_1_BIT = 0x04,
  MPU6050_SELF_TEST_ZG_1_BIT = 0x04
};

/*************************OFFSET definitions************************/

constexpr uint8_t MPU6050_TC_OFFSET_LENGTH = 6;
constexpr uint8_t MPU6050_VDDIO_LEVEL_VLOGIC = 0;
constexpr uint8_t MPU6050_VDDIO_LEVEL_VDD = 1;

enum OFFS_TC_REG_BIT
{
  MPU6050_TC_OTP_BNK_VLD_BIT = 0,
  MPU6050_TC_OFFSET_BIT = 6,
  MPU6050_TC_PWR_MODE_BIT,
};

/****************************CONFIG definitions**************************/

constexpr uint8_t MPU6050_CFG_EXT_SYNC_SET_LENGTH = 3;
constexpr uint8_t MPU6050_CFG_DLPF_CFG_LENGTH = 3;

enum CONFIG_REG_BIT
{
  MPU6050_CFG_DLPF_CFG_BIT = 2,
  MPU6050_CFG_EXT_SYNC_SET_BIT = 5,
};

enum EXT_SYNC_SET
{
  MPU6050_EXT_SYNC_DISABLED = 0x00,
  MPU6050_EXT_SYNC_TEMP_OUT_L,
  MPU6050_EXT_SYNC_GYRO_XOUT_L,
  MPU6050_EXT_SYNC_GYRO_YOUT_L,
  MPU6050_EXT_SYNC_GYRO_ZOUT_L,
  MPU6050_EXT_SYNC_ACCEL_XOUT_L,
  MPU6050_EXT_SYNC_ACCEL_YOUT_L,
  MPU6050_EXT_SYNC_ACCEL_ZOUT_L,
};

enum DLPF_CFG
{
  MPU6050_DLPF_BW_256 = 0x00,
  MPU6050_DLPF_BW_188,
  MPU6050_DLPF_BW_98,
  MPU6050_DLPF_BW_42,
  MPU6050_DLPF_BW_20,
  MPU6050_DLPF_BW_10,
  MPU6050_DLPF_BW_5,
};

/*****************************GYRO_CONFIG definitions****************************/

constexpr uint8_t MPU6050_GCONFIG_FS_SEL_LENGTH = 2;

enum GYRO_CONFIG_REG_BIT
{
  MPU6050_GCONFIG_FS_SEL_BIT = 4,
  MPU6050_ACONFIG_ZG_ST_BIT,
  MPU6050_ACONFIG_YG_ST_BIT,
  MPU6050_ACONFIG_XG_ST_BIT,
};

enum GYRO_FS
{
  MPU6050_GYRO_FS_250 = 0x00,
  MPU6050_GYRO_FS_500,
  MPU6050_GYRO_FS_1000,
  MPU6050_GYRO_FS_2000,
};

/*******************************ACCEL_CONFIG definitions**************************/

constexpr uint8_t MPU6050_ACONFIG_AFS_SEL_LENGTH = 2;
constexpr uint8_t MPU6050_ACONFIG_ACCEL_HPF_LENGTH = 3;

enum ACCEL_CONFIG_REG_BIT
{
  MPU6050_ACONFIG_ACCEL_HPF_BIT = 2,
  MPU6050_ACONFIG_AFS_SEL_BIT = 4,
  MPU6050_ACONFIG_ZA_ST_BIT,
  MPU6050_ACONFIG_YA_ST_BIT,
  MPU6050_ACONFIG_XA_ST_BIT
};

enum ACCEL_FS
{
  MPU6050_ACCEL_FS_2 = 0x00,
  MPU6050_ACCEL_FS_4,
  MPU6050_ACCEL_FS_8,
  MPU6050_ACCEL_FS_16,
};

enum ACCEL_HPF
{
  MPU6050_DHPF_RESET = 0x00,
  MPU6050_DHPF_5,
  MPU6050_DHPF_2P5,
  MPU6050_DHPF_1P25,
  MPU6050_DHPF_0P63,
  MPU6050_DHPF_HOLD = 0x07,
};

/***********************************FIFO_EN definitions*************************/

enum FIFO_EN_REG_BIT
{
  MPU6050_SLV0_FIFO_EN_BIT = 0,
  MPU6050_SLV1_FIFO_EN_BIT,
  MPU6050_SLV2_FIFO_EN_BIT,
  MPU6050_ACCEL_FIFO_EN_BIT,
  MPU6050_ZG_FIFO_EN_BIT,
  MPU6050_YG_FIFO_EN_BIT,
  MPU6050_XG_FIFO_EN_BIT,
  MPU6050_TEMP_FIFO_EN_BIT,
};

/**********************************I2C_MST_CTRL definitions***************************/

constexpr uint8_t MPU6050_I2C_MST_CLK_LENGTH = 4;

enum I2C_MST_CTRL_REG_BIT
{
  MPU6050_I2C_MST_CLK_BIT = 3,
  MPU6050_I2C_MST_P_NSR_BIT,
  MPU6050_SLV_3_FIFO_EN_BIT,
  MPU6050_WAIT_FOR_ES_BIT,
  MPU6050_MULT_MST_EN_BIT,
};

enum I2C_Prescaler
{
  MPU6050_CLOCK_DIV_348 = 0x0,
  MPU6050_CLOCK_DIV_333,
  MPU6050_CLOCK_DIV_320,
  MPU6050_CLOCK_DIV_308,
  MPU6050_CLOCK_DIV_296,
  MPU6050_CLOCK_DIV_286,
  MPU6050_CLOCK_DIV_276,
  MPU6050_CLOCK_DIV_267,
  MPU6050_CLOCK_DIV_258,
  MPU6050_CLOCK_DIV_500,
  MPU6050_CLOCK_DIV_471 = 0xA,
  MPU6050_CLOCK_DIV_444,
  MPU6050_CLOCK_DIV_421,
  MPU6050_CLOCK_DIV_400,
  MPU6050_CLOCK_DIV_381,
  MPU6050_CLOCK_DIV_364,
};

/*********************************I2C_SLVx_ADDR definitions*****************************/

constexpr uint8_t MPU6050_I2C_SLV_ADDR_LENGTH = 7;
constexpr uint8_t MPU6050_I2C_SLV_LEN_LENGTH = 4;

enum I2C_SLVx_ADDR_REG_BIT
{
  MPU6050_I2C_SLV_ADDR_BIT = 6,
  MPU6050_I2C_SLV_RW_BIT,
};

/****************************I2C_SLVx_CTRL definitions (x=0,1,2,3)***********************/

enum I2C_SLVx_CTRL_REG_BIT
{
  MPU6050_I2C_SLV_LEN_BIT = 3,
  MPU6050_I2C_SLV_GRP_BIT,
  MPU6050_I2C_SLV_REG_DIS_BIT,
  MPU6050_I2C_SLV_BYTE_SW_BIT,
  MPU6050_I2C_SLV_EN_BIT
};

/******************************I2C_SLV4_ADDR definitions*************************/

constexpr uint8_t MPU6050_I2C_SLV4_ADDR_LENGTH = 7;

enum I2C_SLV4_ADDR_REG_BIT
{
  MPU6050_I2C_SLV4_ADDR_BIT = 6,
  MPU6050_I2C_SLV4_RW_BIT,
};

/*********************************I2C_SLV4_CTRL definitions************************/

constexpr uint8_t MPU6050_I2C_SLV4_MST_DLY_LENGTH = 5;

enum I2C_SLV4_CTRL_REG_BIT
{
  MPU6050_I2C_SLV4_MST_DLY_BIT = 4,
  MPU6050_I2C_SLV4_REG_DIS_BIT,
  MPU6050_I2C_SLV4_INT_EN_BIT,
  MPU6050_I2C_SLV4_EN_BIT,
};

/*******************************I2C_MST_STATUS definitions************************/

enum I2C_MST_STATUS_REG_BIT
{
  MPU6050_MST_I2C_SLV0_NACK_BIT = 0,
  MPU6050_MST_I2C_SLV1_NACK_BIT,
  MPU6050_MST_I2C_SLV2_NACK_BIT,
  MPU6050_MST_I2C_SLV3_NACK_BIT,
  MPU6050_MST_I2C_SLV4_NACK_BIT,
  MPU6050_MST_I2C_LOST_ARB_BIT,
  MPU6050_MST_I2C_SLV4_DONE_BIT,
  MPU6050_MST_PASS_THROUGH_BIT,
};

/***********************************INT_PIN_CFG definitions***************************/

constexpr uint8_t MPU6050_INTMODE_ACTIVEHIGH = 0x00;
constexpr uint8_t MPU6050_INTMODE_ACTIVELOW = 0x01;

constexpr uint8_t MPU6050_INTDRV_PUSHPULL = 0x00;
constexpr uint8_t MPU6050_INTDRV_OPENDRAIN = 0x01;

constexpr uint8_t MPU6050_INTLATCH_50USPULSE = 0x00;
constexpr uint8_t MPU6050_INTLATCH_WAITCLEAR = 0x01;

constexpr uint8_t MPU6050_INTCLEAR_STATUSREAD = 0x00;
constexpr uint8_t MPU6050_INTCLEAR_ANYREAD = 0x01;

enum INT_PIN_CFG_REG_BIT
{
  MPU6050_INTCFG_CLKOUT_EN_BIT = 0,
  MPU6050_INTCFG_I2C_BYPASS_EN_BIT,
  MPU6050_INTCFG_FSYNC_INT_EN_BIT,
  MPU6050_INTCFG_FSYNC_INT_LEVEL_BIT,
  MPU6050_INTCFG_INT_RD_CLEAR_BIT,
  MPU6050_INTCFG_LATCH_INT_EN_BIT,
  MPU6050_INTCFG_INT_OPEN_BIT,
  MPU6050_INTCFG_INT_LEVEL_BIT,
};

/*********************************INT_STATUS definitions**************************/

enum INT_STATUS_REG_BIT
{
  MPU6050_INTERRUPT_DATA_RDY_BIT = 0,
  MPU6050_INTERRUPT_DMP_INT_BIT,
  MPU6050_INTERRUPT_PLL_RDY_INT_BIT,
  MPU6050_INTERRUPT_I2C_MST_INT_BIT,
  MPU6050_INTERRUPT_FIFO_OFLOW_BIT,
  MPU6050_INTERRUPT_ZMOT_BIT,
  MPU6050_INTERRUPT_MOT_BIT,
  MPU6050_INTERRUPT_FF_BIT,
};

// TODO: figure out what these actually do
// UMPL source code is not very obivous

/***************************DMP_INT_STATUS definitions***************************/

enum DMP_INT_STATUS_REG_BIT
{
  MPU6050_DMPINT_0_BIT = 0,
  MPU6050_DMPINT_1_BIT,
  MPU6050_DMPINT_2_BIT,
  MPU6050_DMPINT_3_BIT,
  MPU6050_DMPINT_4_BIT,
  MPU6050_DMPINT_5_BIT,
};

/***************************MOT_DETECT_STATUS definitions*************************/

enum MOT_DETECT_STATUS_REG_BIT
{
  MPU6050_MOTION_MOT_ZRMOT_BIT = 0,
  MPU6050_MOTION_MOT_ZPOS_BIT = 2,
  MPU6050_MOTION_MOT_ZNEG_BIT,
  MPU6050_MOTION_MOT_YPOS_BIT,
  MPU6050_MOTION_MOT_YNEG_BIT,
  MPU6050_MOTION_MOT_XPOS_BIT,
  MPU6050_MOTION_MOT_XNEG_BIT,
};

/*****************************I2C_MST_DELAY_CTRL definitions************************/

enum I2C_MST_DELAY_CTRL_REG_BIT
{
  MPU6050_DELAYCTRL_I2C_SLV0_DLY_EN_BIT = 0,
  MPU6050_DELAYCTRL_I2C_SLV1_DLY_EN_BIT,
  MPU6050_DELAYCTRL_I2C_SLV2_DLY_EN_BIT,
  MPU6050_DELAYCTRL_I2C_SLV3_DLY_EN_BIT,
  MPU6050_DELAYCTRL_I2C_SLV4_DLY_EN_BIT,
  MPU6050_DELAYCTRL_DELAY_ES_SHADOW_BIT = 7,
};

/*****************************SIGNAL_PATH_RESET definitions**************************/

enum SIGNAL_PATH_RESET_REG_BIT
{
  MPU6050_PATHRESET_TEMP_RESET_BIT = 0,
  MPU6050_PATHRESET_ACCEL_RESET_BIT,
  MPU6050_PATHRESET_GYRO_RESET_BIT
};

/***************************MOT_DETECT_CTRL definitions*****************************/

constexpr uint8_t MPU6050_DETECT_ACCEL_ON_DELAY_LENGTH = 2;
constexpr uint8_t MPU6050_DETECT_FF_COUNT_LENGTH = 2;
constexpr uint8_t MPU6050_DETECT_MOT_COUNT_LENGTH = 2;

enum MOT_DETECT_CTRL_REG_BIT
{
  MPU6050_DETECT_MOT_COUNT_BIT = 1,
  MPU6050_DETECT_FF_COUNT_BIT = 3,
  MPU6050_DETECT_ACCEL_ON_DELAY_BIT = 5,
};

/********************************USER_CTRL definitions******************************/

enum USER_CTRL_REG_BIT
{
  MPU6050_USERCTRL_SIG_COND_RESET_BIT = 0,
  MPU6050_USERCTRL_I2C_MST_RESET_BIT,
  MPU6050_USERCTRL_FIFO_RESET_BIT,
  MPU6050_USERCTRL_DMP_RESET_BIT,
  MPU6050_USERCTRL_I2C_IF_DIS_BIT,
  MPU6050_USERCTRL_I2C_MST_EN_BIT,
  MPU6050_USERCTRL_FIFO_EN_BIT,
  MPU6050_USERCTRL_DMP_EN_BIT
};

/*********************************PWR_MGMT_1 definitions*******************************/

constexpr uint8_t MPU6050_PWR1_CLKSEL_LENGTH = 3;

enum PWR_MGMT_1_REG_BIT
{
  MPU6050_PWR1_CLKSEL_BIT = 2,
  MPU6050_PWR1_TEMP_DIS_BIT,
  MPU6050_PWR1_CYCLE_BIT = 5,
  MPU6050_PWR1_SLEEP_BIT,
  MPU6050_PWR1_DEVICE_RESET_BIT,
};

enum CLK_SRC
{
  MPU6050_CLOCK_INTERNAL = 0x00,
  MPU6050_CLOCK_PLL_XGYRO,
  MPU6050_CLOCK_PLL_YGYRO,
  MPU6050_CLOCK_PLL_ZGYRO,
  MPU6050_CLOCK_PLL_EXT32K,
  MPU6050_CLOCK_PLL_EXT19M,
  MPU6050_CLOCK_KEEP_RESET = 0x07,
};

/*****************************PWR_MGMT_2 definitions****************************/

constexpr uint8_t MPU6050_PWR2_LP_WAKE_CTRL_LENGTH = 2;

enum PWR_MGMT_2_REG_BIT
{
  MPU6050_PWR2_STBY_ZG_BIT = 0,
  MPU6050_PWR2_STBY_YG_BIT,
  MPU6050_PWR2_STBY_XG_BIT,
  MPU6050_PWR2_STBY_ZA_BIT,
  MPU6050_PWR2_STBY_YA_BIT,
  MPU6050_PWR2_STBY_XA_BIT,
  MPU6050_PWR2_LP_WAKE_CTRL_BIT = 7,
};

enum WAKE_FREQ
{
  MPU6050_WAKE_FREQ_1P25 = 0x0,
  MPU6050_WAKE_FREQ_2P5,
  MPU6050_WAKE_FREQ_5,
  MPU6050_WAKE_FREQ_10,
};

/*WHO_AM_I definitions*/
constexpr uint8_t MPU6050_WHO_AM_I_BIT = 6;
constexpr uint8_t MPU6050_WHO_AM_I_LENGTH = 6;

/*memory block definitions*/
constexpr uint8_t MPU6050_DMP_MEMORY_BANKS = 8;
constexpr uint16_t MPU6050_DMP_MEMORY_BANK_SIZE = 256;
constexpr uint8_t MPU6050_DMP_MEMORY_CHUNK_SIZE = 16;

bool mpu6050_init();
void mpu6050_read_raw_data();
void mpu6050_get_raw_data(imu_raw_t *data);